
==================== FINAL INTERFACE ====================
2017-12-06 15:30:29.14888 UTC

interface funcprog-ws17-18r-0.1.0.0-EbHhfSs1oJTIKgnYUQNi6x:MyList 8002
  interface hash: acab81ad43a2478ef8298c3fcc2a7e17
  ABI hash: da27709b2dd3e0b1846c55a699f6ec08
  export-list hash: bcad364e267c9646268bc2407f164f5c
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 4c5005f272c6ca38e84fc81ad1d714e7
  sig of: Nothing
  used TH splices: False
  where
exports:
  MyList.++-
  MyList.and'
  MyList.concat'
  MyList.dropWhile'
  MyList.filter'
  MyList.head'
  MyList.init'
  MyList.intersperse'
  MyList.iterate'
  MyList.last'
  MyList.length'
  MyList.map'
  MyList.maximum'
  MyList.repeat'
  MyList.reverse'
  MyList.tail'
  MyList.takeWhile'
  MyList.zipWith'
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
9689f2a421cd72a1df3c90446abb1d08
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MyList.$trModule2
                   MyList.$trModule1) -}
085fd3794ffa676a8076f56ee1763da0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MyList"#) -}
598d02a211da1fa23569a327ff4b31d7
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "funcprog-ws17-18r-0.1.0.0-EbHhfSs1oJTIKgnYUQNi6x"#) -}
945e2b6d097e6404141ec45ac552ff8c
  $witerate' :: (a -> a) -> a -> (# a, [a] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,U>,
     Inline: [0] -}
9cd7b8d2aa2b01962400e6be1a8ac281
  $wlength' :: [a] -> GHC.Prim.Int#
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>, Inline: [0] -}
355cff61541b67a752cf2e1fbd66ad91
  $wrepeat' :: a -> (# a, [a] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>, Inline: [0] -}
b294e6c81ba07da785f6cd41d787c1e9
  (++-) :: [a] -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
adb1066b4fdbe28ad39d3f9ca9b27734
  and' :: [GHC.Types.Bool] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
8cc55fafa23531eb26f8de4aa114ab65
  concat' :: Data.Foldable.Foldable t => t [a] -> [a]
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLC(C(S))LLLLLLLLLLLLL),1*U(A,A,1*C1(C1(U)),A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ @ (t :: * -> *) @ a ($dFoldable :: Data.Foldable.Foldable t) ->
                 Data.Foldable.foldr
                   @ t
                   $dFoldable
                   @ [a]
                   @ [a]
                   (MyList.++- @ a)
                   (GHC.Types.[] @ a)) -}
933084877b20bba2d2f8e9372a601c7b
  dropWhile' :: (a -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
372d7f5430b6117a3d5b09f5e9df33f6
  filter' :: (a -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
10fcf156365b8d88b81e32d032b29f6e
  head' :: [a] -> a
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: [a]) ->
                 case ds of wild { [] -> MyList.head'1 @ a : x xs -> x }) -}
ce56a979622df9ad20085fc3e50e2649
  head'1 :: a
  {- Strictness: x -}
b5143ee40b010c8efad8687dfd5ea511
  init' :: [a] -> [a]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: [a]) ->
                 case ds of wild {
                   [] -> MyList.init'2 @ a
                   : ipv ipv1
                   -> case MyList.reverse' @ a wild of wild1 {
                        [] -> case MyList.init'1 ret_ty [a] of {}
                        : x xs -> MyList.reverse' @ a xs } }) -}
a5306668712e485f936ae61b0d3f91b0
  init'1 :: [a]
  {- Strictness: x -}
e29902d2c01b88dd64762733e10f502c
  init'2 :: [a]
  {- Strictness: x -}
0514364ba803b9740a522220207f1f63
  intersperse' :: a -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U> -}
898883626a870192dd0265f20cd73f00
  iterate' :: (a -> a) -> a -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><L,U>m2,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: a -> a) (w1 :: a) ->
                 case MyList.$witerate' @ a w w1 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ a ww1 ww2 }) -}
ef17f2c643898073f838a43fb13271d1
  last' :: [a] -> a
  {- Arity: 1, Strictness: <S,1*U> -}
09b2899fab177de164db537d8d843b5b
  length' :: [a] -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: [a]) ->
                 case MyList.$wlength' @ a w of ww { DEFAULT ->
                 GHC.Types.I# ww }) -}
243291cef7a38282c599743b0c9f9b82
  map' :: (a -> b) -> [a] -> [b]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
ffc8c2828079a9dc1fbc549190dc21a6
  maximum' :: GHC.Classes.Ord a => [a] -> a
  {- Arity: 2, Strictness: <L,U(A,A,A,A,C(C1(U)),A,A,A)><S,1*U> -}
98b8b0737072ab4528eabf7c0c1dafcf
  repeat' :: a -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ @ a (w :: a) ->
                 case MyList.$wrepeat' @ a w of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ a ww1 ww2 }) -}
ae4f25eb15eb475ac0ea3d0a06b75f75
  reverse' :: [a] -> [a]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
9fcb8ac85c3d47a76f11ca3650f118b2
  tail' :: [a] -> [a]
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (ds :: [a]) ->
                 case ds of wild { [] -> MyList.init'1 @ a : x xs -> xs }) -}
847239622322de86812424699d529779
  takeWhile' :: (a -> GHC.Types.Bool) -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,C(U)><S,1*U> -}
02f9e84228ee92184e26652b9c3963a1
  zipWith' :: (a -> b -> c) -> [a] -> [b] -> [c]
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,C(C1(U))><S,1*U><L,1*U> -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

