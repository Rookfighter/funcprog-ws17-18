
==================== FINAL INTERFACE ====================
2017-12-06 15:30:29.664246 UTC

interface funcprog-ws17-18r-0.1.0.0-EbHhfSs1oJTIKgnYUQNi6x:MediaLib 8002
  interface hash: 16a4e8404fa63c9969e21f1cd32839e0
  ABI hash: 8402302c75337544951f204b930d738a
  export-list hash: 2182ba9e0ddcd7a66e1e5290a3b9df74
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9818348ff1ae0de586a67810f347de33
  sig of: Nothing
  used TH splices: False
  where
exports:
  MediaLib.addAlbum
  MediaLib.addTrack
  MediaLib.albumDurations
  MediaLib.findAlbum
  MediaLib.findTrackAlbum
  MediaLib.goodAlbums
  MediaLib.importTrack
  MediaLib.importTracks
  MediaLib.rateTrack
  MediaLib.removeAlbum
  MediaLib.removeTrack
  MediaLib.updateAlbum
  MediaLib.updateTrack
  MediaLib.MediaLib{MediaLib.MediaLib albums}
module dependencies: MediaAlbum MediaTrack Tracks
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  MediaAlbum 7406a785b08c06b5e2775a47dd78515a
  exports: c3ee8a23581c2e8bafcdd2d5becc9dea
  Album 51d2399ee5982fbf07a4ecfe958ccad4
  Album aac38a21e03c2487d27115ea8f13066b
  addTrack 31260112036b310a8103a3d01627dd31
  duration 4d546b2e50a63bb3a2ece1ce003e01f7
  findTrack 68a90071031d382b6cd9a07a2b61d515
  goodRatingRatio 593fce8b0894d12aa7538064d741eba1
  removeTrack 4a05dea51eab0272d6df1dfd5ba3ec0a
  title 93db4ab94d143fb66c48fd0ec9800a38
import  -/  MediaTrack 32d3d8772738dfa19864eca154e9f152
  exports: edd65b1ff76a75c01801f29e54edb7de
  Rating faa231605bec02caaceb830c9e0e90b8
  RatingValue 021f2b4b2473a535c82db6d34d98b05f
  Track fda1bbe2f2a1ad1e7fcfd3c920cb4bf0
  Track 72247435e5389bb32b3651d70f2501f4
  User 4e5e44ea7a7abad47d00d28f87f87b0b
  rateTrack 4002897a782a2823d5aa1a92ba7fd4d7
  title 51791d31aec94a49029780bdadf2f489
import  -/  Tracks 655ffbfcec1977c20ea23273d2b5056d
  exports: 522da48c0d5cdc81e0e0d393ebdf3086
  TrackList 587e0954c617cf4866e9741a04505f2f
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
f15befc0c55ab60fa6df66ac373aecd9
  $fShowMediaLib :: GHC.Show.Show MediaLib.MediaLib
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ MediaLib.MediaLib
                  MediaLib.$fShowMediaLib_$cshowsPrec
                  MediaLib.$fShowMediaLib_$cshow
                  MediaLib.$fShowMediaLib_$cshowList -}
f15befc0c55ab60fa6df66ac373aecd9
  $fShowMediaLib1 :: MediaLib.MediaLib -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (\ (w :: MediaLib.MediaLib) (w1 :: GHC.Base.String) ->
                 case w of ww { MediaLib.MediaLib ww1 ->
                 MediaLib.$w$cshowsPrec 0# ww1 w1 }) -}
857247a1d188fc7f47015cef40dc293c
  $fShowMediaLib2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "}"#) -}
d8f6c6e8e41202b532852406a8e5cd30
  $fShowMediaLib3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "albums = "#) -}
7e552ee643c6e3f3478d0646789ce0f9
  $fShowMediaLib4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "MediaLib {"#) -}
f15befc0c55ab60fa6df66ac373aecd9
  $fShowMediaLib_$cshow :: MediaLib.MediaLib -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MediaLib.MediaLib) ->
                 MediaLib.$fShowMediaLib_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
f15befc0c55ab60fa6df66ac373aecd9
  $fShowMediaLib_$cshowList :: [MediaLib.MediaLib] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ MediaLib.MediaLib
                   MediaLib.$fShowMediaLib1) -}
f15befc0c55ab60fa6df66ac373aecd9
  $fShowMediaLib_$cshowsPrec ::
    GHC.Types.Int -> MediaLib.MediaLib -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U(1*U)><L,U>,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: MediaLib.MediaLib)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { MediaLib.MediaLib ww3 ->
                 MediaLib.$w$cshowsPrec ww1 ww3 w2 } }) -}
259e32a2f7e4cb1020e47b6eb47266ec
  $tc'MediaLib :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13543256951502185838##
                   12069270439454900904##
                   MediaLib.$trModule
                   MediaLib.$tc'MediaLib1) -}
2b84ebd44dccb99421699424901115c6
  $tc'MediaLib1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'MediaLib"#) -}
c47cd07b4550231f92f63cf7fc1d69c8
  $tcMediaLib :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   10341572377681077003##
                   2830453723964802189##
                   MediaLib.$trModule
                   MediaLib.$trModule1) -}
dfaee157f7134195ec8a80b33b260621
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   MediaLib.$trModule2
                   MediaLib.$trModule1) -}
432714ac5f77eeb2d23896d26117e3a4
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "MediaLib"#) -}
934808015c69206d812fd6c29d31927a
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "funcprog-ws17-18r-0.1.0.0-EbHhfSs1oJTIKgnYUQNi6x"#) -}
2a52bb49e82ade9f247a049d0cf33cc3
  $w$cshowsPrec ::
    GHC.Prim.Int#
    -> [MediaAlbum.Album] -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><L,1*U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Int#)
                   (ww1 :: [MediaAlbum.Album])
                   (w :: GHC.Base.String) ->
                 let {
                   p :: GHC.Show.ShowS {- Arity: 1, Strictness: <L,1*U> -}
                   = \ (x :: GHC.Base.String)[OneShot] ->
                     GHC.Base.++
                       @ GHC.Types.Char
                       MediaLib.$fShowMediaLib4
                       (GHC.Base.++
                          @ GHC.Types.Char
                          MediaLib.$fShowMediaLib3
                          (let {
                             s :: GHC.Base.String
                             = GHC.Base.++ @ GHC.Types.Char MediaLib.$fShowMediaLib2 x
                           } in
                           case ww1 of wild {
                             [] -> GHC.CString.unpackAppendCString# "[]"# s
                             : x1 xs
                             -> GHC.Types.:
                                  @ GHC.Types.Char
                                  GHC.Show.showList__2
                                  (case x1 of ww2 { MediaAlbum.Album ww3 ww4 ->
                                   MediaAlbum.$w$cshowsPrec
                                     0#
                                     ww3
                                     ww4
                                     (let {
                                        lvl27 :: [GHC.Types.Char]
                                        = GHC.Types.: @ GHC.Types.Char GHC.Show.showList__1 s
                                      } in
                                      letrec {
                                        showl :: [MediaAlbum.Album] -> GHC.Base.String
                                          {- Arity: 1, Strictness: <S,1*U> -}
                                        = \ (ds2 :: [MediaAlbum.Album]) ->
                                          case ds2 of wild1 {
                                            [] -> lvl27
                                            : y ys
                                            -> GHC.Types.:
                                                 @ GHC.Types.Char
                                                 GHC.Show.shows5
                                                 (case y of ww5 { MediaAlbum.Album ww6 ww7 ->
                                                  MediaAlbum.$w$cshowsPrec
                                                    0#
                                                    ww6
                                                    ww7
                                                    (showl ys) }) }
                                      } in
                                      showl xs) }) }))
                 } in
                 case GHC.Prim.tagToEnum#
                        @ GHC.Types.Bool
                        (GHC.Prim.>=# ww 11#) of wild {
                   GHC.Types.False -> p w
                   GHC.Types.True
                   -> GHC.Types.:
                        @ GHC.Types.Char
                        GHC.Show.shows7
                        (p (GHC.Types.: @ GHC.Types.Char GHC.Show.shows4 w)) }) -}
2d85ecb233b7173c61264edaf89eff9d
  $waddTrack ::
    MediaTrack.Track
    -> GHC.Base.String
    -> [MediaAlbum.Album]
    -> (# [MediaAlbum.Album] #)
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: MediaTrack.Track)
                   (w1 :: GHC.Base.String)
                   (ww :: [MediaAlbum.Album]) ->
                 case GHC.List.filter
                        @ MediaAlbum.Album
                        (\ (x :: MediaAlbum.Album) ->
                         case x of wild { MediaAlbum.Album ds1 ds2 ->
                         GHC.Base.eqString w1 ds1 })
                        ww of wild {
                   []
                   -> (# GHC.Base.++
                           @ MediaAlbum.Album
                           (GHC.List.filter
                              @ MediaAlbum.Album
                              (\ (ds :: MediaAlbum.Album) ->
                               case ds of wild1 { MediaAlbum.Album ds1 ds2 ->
                               case GHC.Base.eqString ds1 w1 of wild2 {
                                 GHC.Types.False -> GHC.Types.True
                                 GHC.Types.True -> GHC.Types.False } })
                              ww)
                           (GHC.Types.:
                              @ MediaAlbum.Album
                              (MediaAlbum.Album
                                 w1
                                 (GHC.Types.:
                                    @ MediaTrack.Track
                                    w
                                    (GHC.Types.[] @ MediaTrack.Track)))
                              (GHC.Types.[] @ MediaAlbum.Album)) #)
                   : ipv ipv1
                   -> (# let {
                           a :: GHC.Base.String
                           = case ipv of wild1 { MediaAlbum.Album ds ds1 -> ds }
                         } in
                         GHC.Base.++
                           @ MediaAlbum.Album
                           (GHC.List.filter
                              @ MediaAlbum.Album
                              (\ (ds :: MediaAlbum.Album) ->
                               case ds of wild1 { MediaAlbum.Album ds1 ds2 ->
                               case GHC.Base.eqString ds1 a of wild2 {
                                 GHC.Types.False -> GHC.Types.True
                                 GHC.Types.True -> GHC.Types.False } })
                              ww)
                           (GHC.Types.:
                              @ MediaAlbum.Album
                              (MediaAlbum.Album
                                 a
                                 (case ipv of wild1 { MediaAlbum.Album ds ds1 ->
                                  GHC.Base.++
                                    @ MediaTrack.Track
                                    ds1
                                    (GHC.Types.:
                                       @ MediaTrack.Track
                                       w
                                       (GHC.Types.[] @ MediaTrack.Track)) }))
                              (GHC.Types.[] @ MediaAlbum.Album)) #) }) -}
ad8f2e007be5d1d08266f74390e7e23f
  $wfindAlbum ::
    GHC.Base.String
    -> [MediaAlbum.Album] -> GHC.Base.Maybe MediaAlbum.Album
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) (ww :: [MediaAlbum.Album]) ->
                 case GHC.List.filter
                        @ MediaAlbum.Album
                        (\ (x :: MediaAlbum.Album) ->
                         case x of wild { MediaAlbum.Album ds1 ds2 ->
                         GHC.Base.eqString w ds1 })
                        ww of wild {
                   [] -> GHC.Base.Nothing @ MediaAlbum.Album
                   : ipv ipv1 -> GHC.Base.Just @ MediaAlbum.Album ipv }) -}
38c1da57c81a065ef72bfda828f00306
  $wfindTrackAlbum ::
    GHC.Base.String
    -> [MediaAlbum.Album] -> GHC.Base.Maybe MediaAlbum.Album
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: GHC.Base.String) (ww :: [MediaAlbum.Album]) ->
                 case GHC.List.filter
                        @ MediaAlbum.Album
                        (\ (x :: MediaAlbum.Album) ->
                         case x of ww1 { MediaAlbum.Album ww2 ww3 ->
                         case GHC.List.filter
                                @ MediaTrack.Track
                                (\ (x1 :: MediaTrack.Track) ->
                                 case x1 of wild { MediaTrack.Track ds1 ds2 ds3 ds4 ->
                                 GHC.Base.eqString w ds1 })
                                ww3 of wild {
                           [] -> GHC.Types.False : ipv ipv1 -> GHC.Types.True } })
                        ww of wild {
                   [] -> GHC.Base.Nothing @ MediaAlbum.Album
                   : ipv ipv1 -> GHC.Base.Just @ MediaAlbum.Album ipv }) -}
e57e2ac33160254c3923dc4921f88251
  $wgoodAlbums ::
    MediaTrack.User -> [MediaAlbum.Album] -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (w :: MediaTrack.User) (ww :: [MediaAlbum.Album]) ->
                 letrec {
                   go :: [MediaAlbum.Album] -> [[GHC.Types.Char]]
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [MediaAlbum.Album]) ->
                     case ds of wild {
                       [] -> GHC.Types.[] @ [GHC.Types.Char]
                       : y ys
                       -> case y of ww1 { MediaAlbum.Album ww2 ww3 ->
                          case MediaAlbum.$wgoodRatings w ww3 of ww4 { DEFAULT ->
                          case GHC.List.$wlenAcc
                                 @ MediaTrack.Track
                                 ww3
                                 0# of ww5 { DEFAULT ->
                          case GHC.Prim./##
                                 (GHC.Prim.int2Double# ww4)
                                 (GHC.Prim.int2Double# ww5) of ww6 { DEFAULT ->
                          case GHC.Prim.tagToEnum#
                                 @ GHC.Types.Bool
                                 (GHC.Prim.<=## 0.5## ww6) of wild1 {
                            GHC.Types.False -> go ys
                            GHC.Types.True
                            -> GHC.Types.: @ [GHC.Types.Char] ww2 (go ys) } } } } } }
                 } in
                 go ww) -}
86f5f8f21b57d607e392b49e1e5f30c7
  $wimportTrack ::
    GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.Int
    -> MediaLib.MediaLib
    -> MediaLib.MediaLib
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><L,U>, Inline: [0] -}
9e68a76c95cd50e25e9dd946c79e6272
  $wremoveTrack ::
    MediaTrack.Track -> [MediaAlbum.Album] -> (# [MediaAlbum.Album] #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U,A,A,A)><S,U>,
     Inline: [0],
     Unfolding: (\ (w :: MediaTrack.Track) (ww :: [MediaAlbum.Album]) ->
                 let {
                   ttit :: GHC.Base.String
                   = case w of wild { MediaTrack.Track ds1 ds2 ds3 ds4 -> ds1 }
                 } in
                 case GHC.List.filter
                        @ MediaAlbum.Album
                        (\ (x :: MediaAlbum.Album) ->
                         case x of ww1 { MediaAlbum.Album ww2 ww3 ->
                         case GHC.List.filter
                                @ MediaTrack.Track
                                (\ (x1 :: MediaTrack.Track) ->
                                 case x1 of wild { MediaTrack.Track ds1 ds2 ds3 ds4 ->
                                 GHC.Base.eqString ttit ds1 })
                                ww3 of wild {
                           [] -> GHC.Types.False : ipv ipv1 -> GHC.Types.True } })
                        ww of wild {
                   [] -> (# ww #)
                   : ipv ipv1
                   -> (# let {
                           a :: GHC.Base.String
                           = case ipv of wild1 { MediaAlbum.Album ds ds1 -> ds }
                         } in
                         GHC.Base.++
                           @ MediaAlbum.Album
                           (GHC.List.filter
                              @ MediaAlbum.Album
                              (\ (ds :: MediaAlbum.Album) ->
                               case ds of wild1 { MediaAlbum.Album ds1 ds2 ->
                               case GHC.Base.eqString ds1 a of wild2 {
                                 GHC.Types.False -> GHC.Types.True
                                 GHC.Types.True -> GHC.Types.False } })
                              ww)
                           (GHC.Types.:
                              @ MediaAlbum.Album
                              (MediaAlbum.Album
                                 a
                                 (case ipv of wild1 { MediaAlbum.Album ds ds1 ->
                                  GHC.List.filter
                                    @ MediaTrack.Track
                                    (\ (x :: MediaTrack.Track) ->
                                     case GHC.Classes.$fEq[]_$s$c==1
                                            ttit
                                            (MediaTrack.title x) of wild2 {
                                       GHC.Types.False -> GHC.Types.True
                                       GHC.Types.True -> GHC.Types.False })
                                    ds1 }))
                              (GHC.Types.[] @ MediaAlbum.Album)) #) }) -}
98b57ea6fcbd5ce89b12c3b1e969f7ff
  $wupdateTrack ::
    MediaTrack.Track -> [MediaAlbum.Album] -> (# [MediaAlbum.Album] #)
  {- Arity: 2, Strictness: <L,U(U,U,U,U)><S,U>, Inline: [0],
     Unfolding: (\ (w :: MediaTrack.Track) (ww :: [MediaAlbum.Album]) ->
                 case MediaLib.$wremoveTrack w ww of ww1 { Unit# ww2 ->
                 MediaLib.$waddTrack
                   w
                   (let {
                      ttit :: GHC.Base.String
                      = case w of wild { MediaTrack.Track ds1 ds2 ds3 ds4 -> ds1 }
                    } in
                    case GHC.List.filter
                           @ MediaAlbum.Album
                           (\ (x :: MediaAlbum.Album) ->
                            case x of ww3 { MediaAlbum.Album ww4 ww5 ->
                            case GHC.List.filter
                                   @ MediaTrack.Track
                                   (\ (x1 :: MediaTrack.Track) ->
                                    case x1 of wild { MediaTrack.Track ds1 ds2 ds3 ds4 ->
                                    GHC.Base.eqString ttit ds1 })
                                   ww5 of wild {
                              [] -> GHC.Types.False : ipv ipv1 -> GHC.Types.True } })
                           ww of wild {
                      [] -> MediaLib.rateTrack1 : ipv ipv1 -> MediaAlbum.title ipv })
                   ww2 }) -}
f15befc0c55ab60fa6df66ac373aecd9
  data MediaLib = MediaLib {albums :: [MediaAlbum.Album]}
734c949c6534df85793c5fc879cd5b57
  addAlbum ::
    MediaAlbum.Album -> MediaLib.MediaLib -> MediaLib.MediaLib
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MediaAlbum.Album) (m :: MediaLib.MediaLib) ->
                 MediaLib.MediaLib
                   (case m of wild { MediaLib.MediaLib ds ->
                    GHC.Base.augment
                      @ MediaAlbum.Album
                      (\ @ b
                         (c :: MediaAlbum.Album -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr @ MediaAlbum.Album @ b c n ds)
                      (GHC.Types.:
                         @ MediaAlbum.Album
                         a
                         (GHC.Types.[] @ MediaAlbum.Album)) })) -}
dc9fbdcb2327959224f7968d8fe79594
  addTrack ::
    MediaTrack.Track
    -> GHC.Base.String -> MediaLib.MediaLib -> MediaLib.MediaLib
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S(S),1*U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: MediaTrack.Track)
                   (w1 :: GHC.Base.String)
                   (w2 :: MediaLib.MediaLib) ->
                 case w2 of ww { MediaLib.MediaLib ww1 ->
                 case MediaLib.$waddTrack w w1 ww1 of ww2 { Unit# ww3 ->
                 MediaLib.MediaLib ww3 } }) -}
511d965d00cbbfbbf1e6be2ef6c5fc67
  albumDurations ::
    MediaLib.MediaLib -> [(GHC.Base.String, GHC.Types.Int)]
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: MediaLib.MediaLib) ->
                 case x of wild { MediaLib.MediaLib ds ->
                 GHC.Base.build
                   @ (GHC.Base.String, GHC.Types.Int)
                   (\ @ b1
                      (c :: (GHC.Base.String, GHC.Types.Int) -> b1 -> b1)[OneShot]
                      (n :: b1)[OneShot] ->
                    GHC.Base.foldr
                      @ MediaAlbum.Album
                      @ b1
                      (GHC.Base.mapFB
                         @ (GHC.Base.String, GHC.Types.Int)
                         @ b1
                         @ MediaAlbum.Album
                         c
                         MediaLib.albumDurations1)
                      n
                      ds) }) -}
f9c672f8db9443e720ea0dc53de7f756
  albumDurations1 ::
    MediaAlbum.Album -> (GHC.Base.String, GHC.Types.Int)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,U(1*U,1*U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (a :: MediaAlbum.Album) ->
                 (MediaAlbum.title a, MediaAlbum.duration a)) -}
a0479641255b73b878d66be6d65e1cae
  albums :: MediaLib.MediaLib -> [MediaAlbum.Album]
  RecSel Left MediaLib.MediaLib
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(1*U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: MediaLib.MediaLib) ->
                 case ds of wild { MediaLib.MediaLib ds1 -> ds1 }) -}
e768359d9e9a92f95239193974f9c0e5
  findAlbum ::
    GHC.Base.String
    -> MediaLib.MediaLib -> GHC.Base.Maybe MediaAlbum.Album
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(S),1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String) (w1 :: MediaLib.MediaLib) ->
                 case w1 of ww { MediaLib.MediaLib ww1 ->
                 MediaLib.$wfindAlbum w ww1 }) -}
6484946bfd8506f373d8be5ee74e7433
  findTrackAlbum ::
    GHC.Base.String
    -> MediaLib.MediaLib -> GHC.Base.Maybe MediaAlbum.Album
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(S),1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Base.String) (w1 :: MediaLib.MediaLib) ->
                 case w1 of ww { MediaLib.MediaLib ww1 ->
                 MediaLib.$wfindTrackAlbum w ww1 }) -}
d3df1455d39773307c01a3e0c3055642
  goodAlbums ::
    MediaTrack.User -> MediaLib.MediaLib -> [GHC.Base.String]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S(S),1*U(1*U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MediaTrack.User) (w1 :: MediaLib.MediaLib) ->
                 case w1 of ww { MediaLib.MediaLib ww1 ->
                 MediaLib.$wgoodAlbums w ww1 }) -}
436041daafe199a2cc521928fb3b949c
  importTrack ::
    (GHC.Base.Maybe GHC.Base.String, GHC.Base.String, GHC.Base.String,
     GHC.Types.Int)
    -> MediaLib.MediaLib -> MediaLib.MediaLib
  {- Arity: 1, Strictness: <S(SLLL),1*U(1*U,U,U,U)>,
     Inline: INLINE[0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: (GHC.Base.Maybe GHC.Base.String, GHC.Base.String,
                          GHC.Base.String, GHC.Types.Int)) ->
                 case w of ww { (,,,) ww1 ww2 ww3 ww4 ->
                 MediaLib.$wimportTrack ww1 ww2 ww3 ww4 }) -}
492f57d443d8f13625cef7114c92a781
  importTracks ::
    Tracks.TrackList -> MediaLib.MediaLib -> MediaLib.MediaLib
  {- Arity: 2, Strictness: <S,1*U><L,1*U(U)> -}
7486be6f4e604624273b2430de901374
  rateTrack ::
    MediaTrack.User
    -> MediaTrack.Track
    -> MediaTrack.RatingValue
    -> MediaLib.MediaLib
    -> MediaLib.MediaLib
  {- Arity: 3, Strictness: <L,U><L,U(1*U,1*U,1*U,1*U)><L,U>,
     Unfolding: (\ (u :: MediaTrack.User)
                   (t :: MediaTrack.Track)
                   (r :: MediaTrack.RatingValue) ->
                 let {
                   w :: [MediaTrack.Rating]
                   = case t of wild { MediaTrack.Track ds ds1 ds2 ds3 ->
                     GHC.Base.++
                       @ MediaTrack.Rating
                       ds3
                       (GHC.Types.:
                          @ MediaTrack.Rating
                          (MediaTrack.Rating u r)
                          (GHC.Types.[] @ MediaTrack.Rating)) }
                 } in
                 let {
                   w1 :: GHC.Types.Int
                   = case t of wild { MediaTrack.Track ds ds1 ds2 ds3 -> ds2 }
                 } in
                 let {
                   w2 :: GHC.Base.String
                   = case t of wild { MediaTrack.Track ds ds1 ds2 ds3 -> ds1 }
                 } in
                 let {
                   w3 :: GHC.Base.String
                   = case t of wild { MediaTrack.Track ds ds1 ds2 ds3 -> ds }
                 } in
                 let {
                   w4 :: MediaTrack.Track = MediaTrack.Track w3 w2 w1 w
                 } in
                 \ (w5 :: MediaLib.MediaLib) ->
                 case w5 of ww { MediaLib.MediaLib ww1 ->
                 case MediaLib.$wupdateTrack w4 ww1 of ww2 { Unit# ww3 ->
                 MediaLib.MediaLib ww3 } }) -}
e5c4d2d058e6e4085f9c7d9b2ee37d19
  rateTrack1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "NoAlbum"#) -}
cea4df389deafdbe8ec952501ff20810
  removeAlbum ::
    MediaAlbum.Album -> MediaLib.MediaLib -> MediaLib.MediaLib
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(1*U)>m,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: MediaAlbum.Album) (m :: MediaLib.MediaLib) ->
                 MediaLib.MediaLib
                   (case m of wild { MediaLib.MediaLib ds ->
                    GHC.Base.build
                      @ MediaAlbum.Album
                      (\ @ b
                         (c :: MediaAlbum.Album -> b -> b)[OneShot]
                         (n :: b)[OneShot] ->
                       GHC.Base.foldr
                         @ MediaAlbum.Album
                         @ b
                         (GHC.List.filterFB
                            @ MediaAlbum.Album
                            @ b
                            c
                            (\ (ds1 :: MediaAlbum.Album) -> MediaAlbum.$fEqAlbum_$c/= ds1 a))
                         n
                         ds) })) -}
c60d54735eb26f35bdb1f147a3379a60
  removeTrack ::
    MediaTrack.Track -> MediaLib.MediaLib -> MediaLib.MediaLib
  {- Arity: 2, HasNoCafRefs,
     Strictness: <L,U(U,A,A,A)><S(S),1*U(U)>m, Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MediaTrack.Track) (w1 :: MediaLib.MediaLib) ->
                 case w1 of ww { MediaLib.MediaLib ww1 ->
                 case MediaLib.$wremoveTrack w ww1 of ww2 { Unit# ww3 ->
                 MediaLib.MediaLib ww3 } }) -}
cf6cae8e5263cc5c94e6eafffb5cff8c
  updateAlbum ::
    MediaAlbum.Album -> MediaLib.MediaLib -> MediaLib.MediaLib
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><L,1*U(1*U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MediaAlbum.Album) (w1 :: MediaLib.MediaLib) ->
                 MediaLib.MediaLib
                   (case w1 of wild { MediaLib.MediaLib ds ->
                    GHC.Base.++
                      @ MediaAlbum.Album
                      (GHC.List.filter
                         @ MediaAlbum.Album
                         (\ (ds1 :: MediaAlbum.Album) -> MediaAlbum.$fEqAlbum_$c/= ds1 w)
                         ds)
                      (GHC.Types.:
                         @ MediaAlbum.Album
                         w
                         (GHC.Types.[] @ MediaAlbum.Album)) })) -}
a9b4c28f9e80ec9459d9deaa30ca7a81
  updateTrack ::
    MediaTrack.Track -> MediaLib.MediaLib -> MediaLib.MediaLib
  {- Arity: 2, Strictness: <L,U(U,U,U,U)><S(S),U(U)>m,
     Inline: INLINE[0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: MediaTrack.Track) (w1 :: MediaLib.MediaLib) ->
                 case w1 of ww { MediaLib.MediaLib ww1 ->
                 case MediaLib.$wupdateTrack w ww1 of ww2 { Unit# ww3 ->
                 MediaLib.MediaLib ww3 } }) -}
instance [safe] GHC.Show.Show [MediaLib.MediaLib]
  = MediaLib.$fShowMediaLib
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

