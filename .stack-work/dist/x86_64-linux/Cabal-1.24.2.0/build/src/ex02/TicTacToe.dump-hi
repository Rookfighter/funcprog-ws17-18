
==================== FINAL INTERFACE ====================
2017-12-06 15:30:28.33398 UTC

interface funcprog-ws17-18r-0.1.0.0-EbHhfSs1oJTIKgnYUQNi6x:TicTacToe 8002
  interface hash: c64758807c32ea91c95a0fade3d20c95
  ABI hash: 2322f247b016dd0ecab92e49d5a12fa4
  export-list hash: 944aae8f5d0b58d2e35a1690db1067de
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9818348ff1ae0de586a67810f347de33
  sig of: Nothing
  used TH splices: False
  where
exports:
  TicTacToe.each
  TicTacToe.newBoard
  TicTacToe.setSpace
  TicTacToe.setSpace_
  TicTacToe.state
  TicTacToe.Board
  TicTacToe.GameState{TicTacToe.CirclesWon TicTacToe.CrossesWon TicTacToe.InProgress TicTacToe.Tied}
  TicTacToe.Space{TicTacToe.Circle TicTacToe.Cross TicTacToe.Empty}
module dependencies:
package dependencies: base-4.9.1.0* ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Either base-4.9.1.0:Data.Functor.Const
                         base-4.9.1.0:Data.Monoid base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:GHC.Generics base-4.9.1.0:GHC.IO.Exception
                         base-4.9.1.0:GHC.TypeLits
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.Err 3bba35a16538d33d424682ce66876cdd
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:GHC.Num 00bfaa7b2f9d6084913c0697a8a49ec8
import  -/  base-4.9.1.0:GHC.Show a027f5ac24879eaba752f44aa90fe511
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
42a0f35f751340431604d3da9542630f
  $fEqSpace :: GHC.Classes.Eq TicTacToe.Space
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToe.Space
                  TicTacToe.$fEqSpace_$c==
                  TicTacToe.$fEqSpace_$c/= -}
42a0f35f751340431604d3da9542630f
  $fEqSpace_$c/= ::
    TicTacToe.Space -> TicTacToe.Space -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: TicTacToe.Space) (b :: TicTacToe.Space) ->
                 case a of wild {
                   TicTacToe.Empty
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True TicTacToe.Empty -> GHC.Types.False }
                   TicTacToe.Cross
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True TicTacToe.Cross -> GHC.Types.False }
                   TicTacToe.Circle
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.True
                        TicTacToe.Circle -> GHC.Types.False } }) -}
42a0f35f751340431604d3da9542630f
  $fEqSpace_$c== ::
    TicTacToe.Space -> TicTacToe.Space -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: TicTacToe.Space) (ds1 :: TicTacToe.Space) ->
                 case ds of wild {
                   TicTacToe.Empty
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False TicTacToe.Empty -> GHC.Types.True }
                   TicTacToe.Cross
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False TicTacToe.Cross -> GHC.Types.True }
                   TicTacToe.Circle
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        TicTacToe.Circle -> GHC.Types.True } }) -}
3fef6035e1af03fd070252c4914a9b64
  $fShowGameState :: GHC.Show.Show TicTacToe.GameState
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToe.GameState
                  TicTacToe.$fShowGameState_$cshowsPrec
                  TicTacToe.$fShowGameState_$cshow
                  TicTacToe.$fShowGameState_$cshowList -}
14abe3e76d8c70295265cb51dbbb4620
  $fShowGameState1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Tied"#) -}
6f83d33a92ddba97f66495c47252c310
  $fShowGameState2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "InProgress"#) -}
373a084f8c1cb62a5b64021de9e8f93c
  $fShowGameState3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CirclesWon"#) -}
ca749ebc045ac32cb0638f66f79c5c92
  $fShowGameState4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "CrossesWon"#) -}
3fef6035e1af03fd070252c4914a9b64
  $fShowGameState_$cshow :: TicTacToe.GameState -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TicTacToe.GameState) ->
                 TicTacToe.$fShowGameState_$cshowsPrec
                   GHC.Show.shows22
                   x
                   (GHC.Types.[] @ GHC.Types.Char)) -}
3fef6035e1af03fd070252c4914a9b64
  $fShowGameState_$cshowList ::
    [TicTacToe.GameState] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TicTacToe.GameState
                   TicTacToe.$w$cshowsPrec) -}
3fef6035e1af03fd070252c4914a9b64
  $fShowGameState_$cshowsPrec ::
    GHC.Types.Int -> TicTacToe.GameState -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TicTacToe.GameState)
                   (w2 :: GHC.Base.String) ->
                 TicTacToe.$w$cshowsPrec w1 w2) -}
42a0f35f751340431604d3da9542630f
  $fShowSpace :: GHC.Show.Show TicTacToe.Space
  DFunId
  {- Strictness: m, Inline: [ALWAYS] CONLIKE,
     Unfolding: DFun:.
                  @ TicTacToe.Space
                  TicTacToe.$fShowSpace_$cshowsPrec
                  TicTacToe.$fShowSpace_$cshow
                  TicTacToe.$fShowSpace_$cshowList -}
e9785ead4d6f555a5893d5acadc444f9
  $fShowSpace1 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Circle"#) -}
763a78a6f38ee37c0b605d47fc47f7ce
  $fShowSpace2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Cross"#) -}
3f29dbd43baaecee2278e7f6de6ed504
  $fShowSpace3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# "Empty"#) -}
42a0f35f751340431604d3da9542630f
  $fShowSpace_$cshow :: TicTacToe.Space -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (x :: TicTacToe.Space) ->
                 case x of wild {
                   TicTacToe.Empty -> TicTacToe.$fShowSpace3
                   TicTacToe.Cross -> TicTacToe.$fShowSpace2
                   TicTacToe.Circle -> TicTacToe.$fShowSpace1 }) -}
42a0f35f751340431604d3da9542630f
  $fShowSpace_$cshowList :: [TicTacToe.Space] -> GHC.Show.ShowS
  {- Arity: 2,
     Unfolding: (GHC.Show.showList__
                   @ TicTacToe.Space
                   TicTacToe.$w$cshowsPrec1) -}
42a0f35f751340431604d3da9542630f
  $fShowSpace_$cshowsPrec ::
    GHC.Types.Int -> TicTacToe.Space -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, True)
                (\ (w :: GHC.Types.Int)
                   (w1 :: TicTacToe.Space)
                   (w2 :: GHC.Base.String) ->
                 TicTacToe.$w$cshowsPrec1 w1 w2) -}
b41d278d66efff8e0755f669476b76ad
  $tc'Circle :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11146124622467080459##
                   2282780200292814973##
                   TicTacToe.$trModule
                   TicTacToe.$tc'Circle1) -}
53178922af4c64da2919cd941922f8ab
  $tc'Circle1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Circle"#) -}
8b580ac47fef1ec989bbc303884d0f2d
  $tc'CirclesWon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5626331053560653576##
                   3616078526465537683##
                   TicTacToe.$trModule
                   TicTacToe.$tc'CirclesWon1) -}
318feee3a1959ede5de7ebea5f6bcadb
  $tc'CirclesWon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CirclesWon"#) -}
0744e5be14859c278cc8a09245107741
  $tc'Cross :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12878128318291215018##
                   9798201013620652067##
                   TicTacToe.$trModule
                   TicTacToe.$tc'Cross1) -}
fdfe10347cb5760b767dbc125c0be502
  $tc'Cross1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Cross"#) -}
26386a39b795b577572e8c3af55da1b0
  $tc'CrossesWon :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8257314017814556692##
                   5603334869599373272##
                   TicTacToe.$trModule
                   TicTacToe.$tc'CrossesWon1) -}
521541fd25e03810241aee9b274ba4e4
  $tc'CrossesWon1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'CrossesWon"#) -}
5ae2af981c8210b58a5d79aec8be81e2
  $tc'Empty :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11990766643765405886##
                   362418792480647652##
                   TicTacToe.$trModule
                   TicTacToe.$tc'Empty1) -}
74252336dc18ce272c0b6810a5fcacb4
  $tc'Empty1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Empty"#) -}
a3c11b90ed748a0023475dde745506f2
  $tc'InProgress :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16255881495598337120##
                   9669036277349686943##
                   TicTacToe.$trModule
                   TicTacToe.$tc'InProgress1) -}
eca43343e887f966a73356eb4c3e5fe1
  $tc'InProgress1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'InProgress"#) -}
8c6351fa19704b1d13e7a2e54cc6a579
  $tc'Tied :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13951880024774693886##
                   17014966688972948577##
                   TicTacToe.$trModule
                   TicTacToe.$tc'Tied1) -}
609906fc4601ba6a2382c525549a0ae3
  $tc'Tied1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "'Tied"#) -}
a51785448199f25357ae8604d18220e9
  $tcGameState :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11907341188237295459##
                   272617619359716546##
                   TicTacToe.$trModule
                   TicTacToe.$tcGameState1) -}
bf6c138c6aae8fc71a75f43e69faae6d
  $tcGameState1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "GameState"#) -}
28b4265619bac24473fb4ad2d48dfc9c
  $tcSpace :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5383089785139154686##
                   8846552800762723815##
                   TicTacToe.$trModule
                   TicTacToe.$tcSpace1) -}
5ff851d861c1cdaac7eb8e8482f5116d
  $tcSpace1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "Space"#) -}
5aca0404379849665fae48a6b76056be
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TicTacToe.$trModule2
                   TicTacToe.$trModule1) -}
9acbaf829c64a5549e462d2be7d647cf
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TicTacToe"#) -}
e180d60c4f2abd5a9d3c496882dd5165
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS
                   "funcprog-ws17-18r-0.1.0.0-EbHhfSs1oJTIKgnYUQNi6x"#) -}
3fef6035e1af03fd070252c4914a9b64
  $w$cshowsPrec ::
    TicTacToe.GameState -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: TicTacToe.GameState) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TicTacToe.CrossesWon
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToe.$fShowGameState4 w1
                   TicTacToe.CirclesWon
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToe.$fShowGameState3 w1
                   TicTacToe.InProgress
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToe.$fShowGameState2 w1
                   TicTacToe.Tied
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToe.$fShowGameState1 w1 }) -}
42a0f35f751340431604d3da9542630f
  $w$cshowsPrec1 ::
    TicTacToe.Space -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, Strictness: <S,1*U><L,1*U>, Inline: [0],
     Unfolding: (\ (w :: TicTacToe.Space) (w1 :: GHC.Base.String) ->
                 case w of wild {
                   TicTacToe.Empty
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToe.$fShowSpace3 w1
                   TicTacToe.Cross
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToe.$fShowSpace2 w1
                   TicTacToe.Circle
                   -> GHC.Base.++ @ GHC.Types.Char TicTacToe.$fShowSpace1 w1 }) -}
38f5bb87752b828fca22b9eace88a5e1
  $wsetSpace_ ::
    TicTacToe.Board
    -> TicTacToe.Space
    -> GHC.Integer.Type.Integer
    -> (# TicTacToe.Space, [TicTacToe.Space] #)
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>, Inline: [0] -}
4f465f91df5a59cd44f8fdc54f4375af
  $wunsafeDrop :: GHC.Prim.Int# -> [a1] -> [a1]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,1*U><S,1*U>,
     Inline: [0] -}
7179b5471440065df74f76c8dff5bc34
  type Board = [TicTacToe.Space]
3fef6035e1af03fd070252c4914a9b64
  data GameState = CrossesWon | CirclesWon | InProgress | Tied
42a0f35f751340431604d3da9542630f
  data Space = Empty | Cross | Circle
9427020b4641f9e12bb620d1df187be4
  each :: GHC.Types.Int -> [a] -> [a]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><S,1*U>,
     Unfolding: (\ @ a (n :: GHC.Types.Int) (eta :: [a]) ->
                 letrec {
                   go :: [a] -> [a] {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (x :: [a]) ->
                     case x of wild {
                       [] -> GHC.Types.[] @ a
                       : ds1 ds2
                       -> GHC.Types.:
                            @ a
                            ds1
                            (case n of wild1 { GHC.Types.I# x1 ->
                             case GHC.Prim.tagToEnum#
                                    @ GHC.Types.Bool
                                    (GHC.Prim.<=# x1 0#) of wild2 {
                               GHC.Types.False -> go (TicTacToe.$wunsafeDrop @ a x1 wild)
                               GHC.Types.True -> go wild } }) }
                 } in
                 go eta) -}
f478eed859a1aa821165bd08c25197a4
  newBoard :: TicTacToe.Board
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   TicTacToe.newBoard1) -}
e5fc1e0cdab1311530a901e2e423c837
  newBoard1 :: [TicTacToe.Space]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   TicTacToe.newBoard2) -}
6abe58c731699098f2c95513a264fab3
  newBoard2 :: [TicTacToe.Space]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   TicTacToe.newBoard3) -}
9044f6ae4d8a801cdadc27a24935d552
  newBoard3 :: [TicTacToe.Space]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   TicTacToe.newBoard4) -}
dfe707e6953965060f224d8eaf957707
  newBoard4 :: [TicTacToe.Space]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   TicTacToe.newBoard5) -}
d71f71b6482c98fca4ea9becf46ca006
  newBoard5 :: [TicTacToe.Space]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   TicTacToe.newBoard6) -}
e2c15bfd82ed6114d5afa5c202b8ce11
  newBoard6 :: [TicTacToe.Space]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   TicTacToe.newBoard7) -}
3b382d76edf523c579359c5f86b14961
  newBoard7 :: [TicTacToe.Space]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   TicTacToe.newBoard8) -}
2560e89929296e5e60fe07c4fe4ebf1c
  newBoard8 :: [TicTacToe.Space]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ TicTacToe.Space
                   TicTacToe.Empty
                   (GHC.Types.[] @ TicTacToe.Space)) -}
fb7e7ad9dd8a78c742d532fe0ce8aa72
  setSpace ::
    TicTacToe.Board
    -> TicTacToe.Space
    -> GHC.Integer.Type.Integer
    -> GHC.Integer.Type.Integer
    -> TicTacToe.Board
  {- Arity: 4, Strictness: <S,1*U><L,U><S,U><S,1*U>m2,
     Unfolding: InlineRule (4, True, False)
                (\ (b :: TicTacToe.Board)
                   (s :: TicTacToe.Space)
                   (x :: GHC.Integer.Type.Integer)
                   (y :: GHC.Integer.Type.Integer) ->
                 TicTacToe.setSpace_
                   b
                   s
                   (GHC.Integer.Type.plusInteger
                      (GHC.Integer.Type.timesInteger y TicTacToe.setSpace1)
                      x)) -}
45b9803f982d454025602c27bb686229
  setSpace1 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (3) -}
873ccdd6dfbe7d084938568ee47ae5d7
  setSpace_ ::
    TicTacToe.Board
    -> TicTacToe.Space -> GHC.Integer.Type.Integer -> TicTacToe.Board
  {- Arity: 3, Strictness: <S,1*U><L,U><S,U>m2, Inline: INLINE[0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: TicTacToe.Board)
                   (w1 :: TicTacToe.Space)
                   (w2 :: GHC.Integer.Type.Integer) ->
                 case TicTacToe.$wsetSpace_ w w1 w2 of ww { (#,#) ww1 ww2 ->
                 GHC.Types.: @ TicTacToe.Space ww1 ww2 }) -}
a8a468cf577d4760e2d325db7c477ea4
  state :: TicTacToe.Board -> TicTacToe.GameState
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U> -}
instance [safe] GHC.Classes.Eq [TicTacToe.Space]
  = TicTacToe.$fEqSpace
instance [safe] GHC.Show.Show [TicTacToe.GameState]
  = TicTacToe.$fShowGameState
instance [safe] GHC.Show.Show [TicTacToe.Space]
  = TicTacToe.$fShowSpace
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

