
==================== FINAL INTERFACE ====================
2017-12-06 15:32:05.850133 UTC

interface main@main:TestUndup 8002
  interface hash: 24b7041b03f8d8f5f975a692d1b03f94
  ABI hash: 879f7a5eb292a33db34473f7f615c461
  export-list hash: d04c67dbbc14bef02e72ff745e5cbe02
  orphan hash: 693e9af84d3dfcc71e640e005bdc5e2e
  flag hash: 9b04019cd468bf9dddf99e3516d587e7
  sig of: Nothing
  used TH splices: False
  where
exports:
  TestUndup.prop_UndupNub
  TestUndup.prop_UndupUnEq
module dependencies:
package dependencies: QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu
                      array-0.5.1.1@array-0.5.1.1 base-4.9.1.0*
                      containers-0.5.7.1@containers-0.5.7.1
                      deepseq-1.4.2.0@deepseq-1.4.2.0
                      funcprog-ws17-18r-0.1.0.0@funcprog-ws17-18r-0.1.0.0-EbHhfSs1oJTIKgnYUQNi6x
                      ghc-boot-th-8.0.2@ghc-boot-th-8.0.2 ghc-prim-0.5.0.0
                      integer-gmp-1.0.0.1 pretty-1.1.3.3@pretty-1.1.3.3
                      primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh
                      random-1.1@random-1.1-9tceXaeYIMZ4JrKq20Egog
                      template-haskell-2.11.1.0
                      tf-random-0.5@tf-random-0.5-CJZw1ZWS5MOJlR60HqKEZL
                      time-1.6.0.1@time-1.6.0.1 transformers-0.5.2.0@transformers-0.5.2.0
orphans: base-4.9.1.0:GHC.Base base-4.9.1.0:GHC.Float
         time-1.6.0.1@time-1.6.0.1:Data.Time.Calendar.Gregorian
         time-1.6.0.1@time-1.6.0.1:Data.Time.Format.Parse
         time-1.6.0.1@time-1.6.0.1:Data.Time.LocalTime.LocalTime
         transformers-0.5.2.0@transformers-0.5.2.0:Control.Monad.Trans.Error
family instance modules: base-4.9.1.0:Control.Applicative
                         base-4.9.1.0:Data.Complex base-4.9.1.0:Data.Either
                         base-4.9.1.0:Data.Functor.Const base-4.9.1.0:Data.Functor.Identity
                         base-4.9.1.0:Data.List.NonEmpty base-4.9.1.0:Data.Monoid
                         base-4.9.1.0:Data.Semigroup base-4.9.1.0:Data.Type.Equality
                         base-4.9.1.0:Data.Version base-4.9.1.0:Data.Void
                         base-4.9.1.0:GHC.Exts base-4.9.1.0:GHC.Generics
                         base-4.9.1.0:GHC.IO.Exception base-4.9.1.0:GHC.TypeLits
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntMap.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.IntSet.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Map.Base
                         containers-0.5.7.1@containers-0.5.7.1:Data.Sequence
                         containers-0.5.7.1@containers-0.5.7.1:Data.Set.Base
                         ghc-boot-th-8.0.2@ghc-boot-th-8.0.2:GHC.LanguageExtensions.Type
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.3@pretty-1.1.3.3:Text.PrettyPrint.HughesPJ
                         primitive-0.6.2.0@primitive-0.6.2.0-4578caNkWQ54Gt1mxLF2Yh:Control.Monad.Primitive
                         template-haskell-2.11.1.0:Language.Haskell.TH.Syntax
import  -/  QuickCheck-2.9.2@QuickCheck-2.9.2-LvlomhGMxrFBkX1zwiWpQu:Test.QuickCheck 7a1791e2e66f06ce3b95a443f0d4b1ed
import  -/  base-4.9.1.0:Data.Foldable 3e0b6967a1da89945d0e2d47266337a2
import  -/  base-4.9.1.0:Data.List 07ae2acca6538aa0800bd0a993ac6ac1
import  -/  base-4.9.1.0:Data.OldList 27987919d8da2f92e3f472ca81f730f8
import  -/  base-4.9.1.0:GHC.Base c4231c43c07e46080a26bf94094c7aa1
import  -/  base-4.9.1.0:GHC.List ab8c4e523e6c479c549d3bcd5fc4a439
import  -/  base-4.9.1.0:Prelude 22dd289b8469a8fa8dc81cab7b237771
import  -/  funcprog-ws17-18r-0.1.0.0@funcprog-ws17-18r-0.1.0.0-EbHhfSs1oJTIKgnYUQNi6x:Undup 481ed7953b1f967006afcba8fee698ad
import  -/  ghc-prim-0.5.0.0:GHC.Classes 0bdf3d057a415ec1b84a7b1994efbe47
import  -/  integer-gmp-1.0.0.1:GHC.Integer.Type 318df275d77dcdb18e0006d8d7870c2a
1aa96d05c0d398dd1f0cd7984a00e5b9
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module
                   TestUndup.$trModule2
                   TestUndup.$trModule1) -}
14ff41d2a6014fd4e6b095c3f6d85ca0
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "TestUndup"#) -}
7c1ae430a6670ca96e3457ea50bb7438
  $trModule2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS "main"#) -}
a93406a1ab95b21a463a43fa8311288c
  prop_UndupNub :: [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: (\ (xs :: [GHC.Integer.Type.Integer]) ->
                 GHC.Classes.$fEq[]_$c==
                   @ GHC.Integer.Type.Integer
                   GHC.Integer.Type.$fEqInteger
                   (Undup.undup
                      @ GHC.Integer.Type.Integer
                      GHC.Integer.Type.$fEqInteger
                      xs)
                   (Data.OldList.nubBy
                      @ GHC.Integer.Type.Integer
                      GHC.Integer.Type.eqInteger
                      xs)) -}
b0f65e9895601536adf36cd3fb9ac94e
  prop_UndupUnEq :: [GHC.Integer.Type.Integer] -> GHC.Types.Bool
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: InlineRule (0, True, True)
                TestUndup.prop_UndupUnEq1
                  `cast`
                (<[GHC.Integer.Type.Integer]>_R ->_R Data.Monoid.N:All[0]) -}
fa08edfac8dc96cedf1c92781e9f7419
  prop_UndupUnEq1 :: [GHC.Integer.Type.Integer] -> Data.Monoid.All
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>,
     Unfolding: (\ (xs :: [GHC.Integer.Type.Integer]) ->
                 let {
                   xs1 :: [GHC.Integer.Type.Integer]
                   = Undup.undup
                       @ GHC.Integer.Type.Integer
                       GHC.Integer.Type.$fEqInteger
                       xs
                 } in
                 letrec {
                   go :: [GHC.Integer.Type.Integer] -> Data.Monoid.All
                     {- Arity: 1, Strictness: <S,1*U> -}
                   = \ (ds :: [GHC.Integer.Type.Integer]) ->
                     case ds of wild {
                       [] -> GHC.Types.True `cast` (Sym (Data.Monoid.N:All[0]))
                       : y ys
                       -> letrec {
                            $wgo :: [GHC.Integer.Type.Integer]
                                    -> GHC.Prim.Int# -> GHC.Prim.Int#
                              {- Arity: 2, Strictness: <S,1*U><L,U>, Inline: [0] -}
                            = \ (w :: [GHC.Integer.Type.Integer]) (ww :: GHC.Prim.Int#) ->
                              case w of wild1 {
                                [] -> ww
                                : y1 ys1
                                -> case GHC.Integer.Type.eqInteger# y1 y of wild2 { DEFAULT ->
                                   case GHC.Prim.tagToEnum# @ GHC.Types.Bool wild2 of wild3 {
                                     GHC.Types.False -> $wgo ys1 ww
                                     GHC.Types.True -> $wgo ys1 (GHC.Prim.+# ww 1#) } } }
                          } in
                          case $wgo xs1 0# of ww {
                            DEFAULT -> GHC.Types.False `cast` (Sym (Data.Monoid.N:All[0]))
                            1# -> go ys } }
                 } in
                 go xs1) -}
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: safe
require own pkg trusted: False

